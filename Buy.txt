//+------------------------------------------------------------------+
//|                                                     Buy 1.1.6.mq4|
//|                                                             dori |
//|                                             fb.com/dori.claudino |
//+------------------------------------------------------------------+
#property copyright "dori"
#property link      "fb.com/dori.claudino"

extern int @MagicNumber = 2000;
extern int @MaxOpenPositions = 15;
extern double @MaxPipStep = 200; 
extern double @MaxVolume  = 10;
//------------------------------
extern double @LoteInicial = 0.1;
extern double @MinLoteStep = 0.01;
extern double @MinPipStep = 40; 
//------------------------------
extern double @LoteExponencial = 1.1;
extern double @PipStepExponencial = 1.3;
//------------------------------
extern double @TakeProfit = 18; 
//------------------------------
extern int @SyncDelay = 4;
extern double @Slippage   = 5;


int InitHour = 0;
//+------------------------------------------------------------------+
//| expert initialization function                                   |
//+------------------------------------------------------------------+
int init() {
	if(MarketInfo(Symbol(),MODE_DIGITS)==3 || MarketInfo(Symbol(),MODE_DIGITS)==5) {@MaxPipStep*=10; @MinPipStep*=10; @TakeProfit*=10; @Slippage*=10;}
	InitHour = Hour();
	SyncProfit( OP_BUY , @MagicNumber , Symbol() , @TakeProfit );  	
	return(0);
}
//+------------------------------------------------------------------+
//| expert deinitialization function                                 |
//+------------------------------------------------------------------+
int deinit() {
//----

//----
	return(0);
}
//+------------------------------------------------------------------+
//| expert start function                                            |
//+------------------------------------------------------------------+
int start() {
     
    int TOTAL_ORDERS = GetOrdersTotal( OP_BUY , @MagicNumber , Symbol() );
    double TOTAL_LOTES = GetLotsTotal( OP_BUY , @MagicNumber , Symbol() );
    double LAST_OPEN_PRICE = GetLastOpenPrice( OP_BUY , @MagicNumber , Symbol() );
    double LAST_OPEN_LOTE = GetLastOpenLot( OP_BUY , @MagicNumber , Symbol() );
    
    //volume com potencial
    double volume =  NormalizeDouble(@LoteInicial*MathPow(@LoteExponencial,TOTAL_ORDERS),2); 
    
    //pipstep com potencial
    double pipstep = NormalizeDouble(@MinPipStep*MathPow(@PipStepExponencial,TOTAL_ORDERS-1),2); //aqui foi utilizado -1, para nao sair multiplicando logo na segunda negociacao *bug do ilan*
      
   //Com maxpipstep o preco da media ira atualizar, evitando esperar grande volatilidade
   if(pipstep>@MaxPipStep) pipstep = @MaxPipStep;
  
   //volume é menor que o permitido pelo broker
   if(volume>MarketInfo(Symbol(),MODE_MAXLOT))volume=MarketInfo(Symbol(),MODE_MAXLOT); 
   
   //Verifica se o lotestep está sendo cumprido [ok].
   if(volume < LAST_OPEN_LOTE+@MinLoteStep && TOTAL_ORDERS>0 )volume = LAST_OPEN_LOTE + @MinLoteStep;             
      
   if(TOTAL_ORDERS < @MaxOpenPositions){ //verificacao numero de posicoes [OK]

      if(volume + TOTAL_LOTES < @MaxVolume){//verifica o total de lotes mais o proximo lote, se é menor que o maxvolume permitido na conta [OK]
      
         if(LAST_OPEN_PRICE - Ask >= pipstep*Point || TOTAL_ORDERS == 0){//verifica se já fez o pipstep com potencial
            SendOrder( OP_BUY, @MagicNumber, Symbol(), volume, @Slippage, TOTAL_ORDERS+1 + " " + @MagicNumber); 
            Sleep(5000);
            
            //Nas contas do tipo PAMM, não podemos enviar as negociações com StopLoss e TakeProfit, devemos alterar esses níveis após criar a ordem.
            //Necessidade de criar uma Flag para de tempos em tempos atualizar e verificar os niveis de Profit, pois caso abra a negociação e logo caia o terminal, ele deve de tempos fazer essa verificaçao.
            SyncProfit( OP_BUY , @MagicNumber , Symbol() , @TakeProfit );    
         }
      }  
   }   
   
   if((Hour()>InitHour && Hour()-InitHour>=@SyncDelay) || (Hour()<InitHour && InitHour-Hour()>=@SyncDelay)){
      //Print("Synchronizing TPs ");
      SyncProfit( OP_BUY , @MagicNumber , Symbol() , @TakeProfit);  
      InitHour = Hour();
   }
           
   string comentario =  "Buy 1.1.5" + "\n" +
                        "Ordens .: " + DoubleToStr(TOTAL_ORDERS,0) + "\n" +
                        "Lotes .: " + DoubleToStr(TOTAL_LOTES,2) + "\n" +
                        "Preco Medio.: " + DoubleToStr(GetMedianPrice(OP_BUY,@MagicNumber,Symbol()),Digits) + "\n" +
                        "Prox Lote .: " + DoubleToStr(volume,2) + "\n" +
                        "PipStep .: " + DoubleToStr(pipstep,0) + "\n" +
                        "Pips to open.: " + DoubleToStr(pipstep-((LAST_OPEN_PRICE-Bid)/Point),0);

   Sleep(500);
   Comment(comentario);
	return(0);
}
//+------------------------------------------------------------------+

int GetOrdersTotal(int ordertype, int magicnumber, string symbol) {
	int count = 0;
	
	if(OrdersTotal()<1) {
		return (0);
	} else {
		for (int index = OrdersTotal() - 1; index >= 0; index--) {
			if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {
			if(OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype) {
					count++;
				} else {
					continue;
				}
			}
		}
	}
	return (count);
}


int SendOrder(int ordertype, int magicnumber, string symbol, double Lot, double slippage, string comment){
int ticket = 0;

      for(int n=5;n>=0;n--){	  
		if(ordertype == OP_BUY)
			ticket = OrderSend(symbol,ordertype,Lot,Ask,slippage,0,0,comment,magicnumber,NULL,Blue); 
		else
			ticket = OrderSend(symbol,ordertype,Lot,Bid,slippage,0,0,comment,magicnumber,NULL,Red); 			
		            
         int err = GetLastError();
         if (err == 0/* NO_ERROR */) break;
         if (!(err == 4/* SERVER_BUSY */ || err == 137/* BROKER_BUSY */ || err == 146/* TRADE_CONTEXT_BUSY */ || err == 136/* OFF_QUOTES */)) break;
         Sleep(5000);
      }
   return(ticket);   
}


double GetLotsTotal(int ordertype,int magicnumber, string symbol) {
   int total = GetOrdersTotal(ordertype,magicnumber,symbol);
   double lotstotal = 0;
	
	if(total<1){
		return(0);
	}else{   
		for (int index = OrdersTotal() - 1; index >= 0; index--) {
			if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {
				if (OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype) {
					lotstotal += OrderLots();
				}
			}
		}
	}		
   return (lotstotal);
}

double GetLastOpenPrice(int ordertype,int magicnumber, string symbol) {
   double oldprice = 0;
   int oldticket = 0;
   int newticket = 0;
   
	  for (int index = OrdersTotal() - 1; index >= 0; index--) {
         if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {
            if (OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype) {
               oldticket = OrderTicket();
				if (oldticket > newticket) {
					oldprice = OrderOpenPrice();
					newticket = oldticket;
				}
            }
         }
      }     
   return (oldprice);
}

double GetLastOpenLot(int ordertype,int magicnumber, string symbol) {
   double lastlot = 0;
   int oldticket = 0;
   int newticket = 0;
   
		for (int index = OrdersTotal() - 1; index >= 0; index--) {
         if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {
            if (OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype) {
               oldticket = OrderTicket();
				if (oldticket > newticket) {
					lastlot = OrderLots();
					newticket = oldticket;
				}
            }
         }
      }     
   return (lastlot);
}

double GetMedianPrice(int ordertype, int magicnumber, string symbol){
   int total = GetOrdersTotal(ordertype,magicnumber,symbol);
   double medianprice = 0;
   double count = 0;
   
	if(total<1) {
		return (0);
	} else {
		for (int index = OrdersTotal() - 1; index >= 0; index--) {
			if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {
			if(OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype) {
					medianprice += OrderOpenPrice() * OrderLots();
					count += OrderLots();
				} else {
					continue;
				}
			}
		}
	}
	if(count>0){
		medianprice = NormalizeDouble(medianprice / count,Digits);
	}
	return (medianprice);
}

double GetTakeProfit(int ordertype, double price, double stop){
double newtakeprofit = 0;

	if(stop == 0){
		return(0);
	}else{
		if(ordertype == OP_BUY){
			newtakeprofit = price + stop * Point;
		}
		if(ordertype == OP_SELL){
			newtakeprofit = price - stop * Point;
		}
	}
	return(newtakeprofit);
}


void SyncProfit(int ordertype,int magicnumber, string symbol, double lucro){  
int total = GetOrdersTotal(ordertype,magicnumber,symbol); 
bool modify = false;

	if(total<1 || lucro < 1){
		return(0);
	}else{   
	double medianprice = GetMedianPrice(ordertype,magicnumber,symbol);
   double newtakeprofit = GetTakeProfit(ordertype,medianprice, lucro);  	
	
		for(int index=0; index<=OrdersTotal(); index++){
			if(OrderSelect(index,SELECT_BY_POS,MODE_TRADES)) {	
			   if (OrderSymbol() == symbol && OrderMagicNumber() == magicnumber && OrderType() == ordertype && OrderTakeProfit() != newtakeprofit) {
			      if(OrderType() == OP_BUY)
			         OrderModify(OrderTicket(),OrderOpenPrice(),OrderStopLoss(),newtakeprofit,OrderExpiration(),Blue);	      
			      else if(OrderType() == OP_SELL) 
			         OrderModify(OrderTicket(),OrderOpenPrice(),OrderStopLoss(),newtakeprofit,OrderExpiration(),Red);	
			         
			      if(GetLastError()>1)
			         Print("Erro.:"+GetLastError());	      
			   }
			}
			Sleep(1000);
		}
	}
}						

